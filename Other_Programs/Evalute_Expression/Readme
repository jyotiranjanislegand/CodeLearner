/*
File Name : class_Evaluate.cpp
Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.

Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

 

Example 1:

Input: s = "1 + 1"
Output: 2
Example 2:

Input: s = " 2-1 + 2 "
Output: 3
Example 3:

Input: s = "(1+(4+5+2)-3)+(6+8)"
Output: 23
 

Constraints:

1 <= s.length <= 3 * 105
s consists of digits, '+', '-', '(', ')', and ' '.
s represents a valid expression.
'+' is not used as a unary operation (i.e., "+1" and "+(2 + 3)" is invalid).
'-' could be used as a unary operation (i.e., "-1" and "-(2 + 3)" is valid).
There will be no two consecutive operators in the input.
Every number and running calculation will fit in a signed 32-bit integer.*/

//Ans : calc(sting str);

/*Given a string s which represents an expression, evaluate this expression and return its value. 

The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].

Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

 

Example 1:

Input: s = "3+2*2"
Output: 7
Example 2:

Input: s = " 3/2 "
Output: 1
Example 3:

Input: s = " 3+5 / 2 "
Output: 5
 

Constraints:

1 <= s.length <= 3 * 105
s consists of integers and operators ('+', '-', '*', '/') separated by some number of spaces.
s represents a valid expression.
All the integers in the expression are non-negative integers in the range [0, 231 - 1].
The answer is guaranteed to fit in a 32-bit integer.*/

//Ans : calculate(sting str);


/* 
    File Name : Prefix_PostFix_Infix.cpp
    Created by Jyoti Ranjan on 16/06/22.
    Prefix_PostFix_Infix.cpp
    Created by Jyoti Ranjan on 16/06/22.


    STRING :A+(B-C)^(F*G)
    Infix : A+(B-C)^(F*G) to Prefix: +A^-BC*FG
    Infix: A+(B-C)^(F*G) to Postfix : ABC-FG*^+
    PostFix: "ABC-FG*^+" to Infix: "(A+((B-C)^(F*G)))"
    
    PreFix: "+A^-BC*FG" to Infix: "(A+((B-C)^(F*G)))"
    
    PostFix: "ABC-FG*^+" to Prefix: "+A^-BC*FG"
*/
